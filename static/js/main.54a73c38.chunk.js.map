{"version":3,"sources":["components/styles.js","components/app.jsx","index.js","reducers/rootreducer.jsx"],"names":["AppSec","styled","div","App","state","text","date","Date","showrem","undefined","this","props","reminders","console","log","className","id","htmlFor","onChange","e","setState","target","value","type","placeholder","onFocus","selected","timeFormat","dateFormat","showTimeSelect","onClick","addReminder","clearReminder","map","reminder","style","color","moment","fromNow","removeReminder","Component","connect","dispatch","store","createStore","action","read_cookie","uuidv4","bake_cookie","filter","ReactDOM","render","document","getElementById"],"mappings":"8OACaA,E,MAAQC,EAAOC,IAAT,2N,sCCObC,E,4MACFC,MAAQ,CACJC,KAAM,GACNC,KAAK,IAAIC,M,4CAGb,WAAU,IAAD,OACDC,GAAU,EAKd,YAJ2BC,IAAvBC,KAAKC,MAAMC,YACXJ,GAAQ,GAEZK,QAAQC,IAAIJ,KAAKC,MAAMC,WACf,mCACJ,eAACZ,EAAD,WACA,sBAAMe,UAAU,MAAMC,GAAG,QAAzB,gCACA,sBAAKA,GAAG,YAAYD,UAAU,wBAA9B,UACA,uBAAOE,QAAQ,QAAf,8BACA,uBAAOC,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEf,KAAMc,EAAEE,OAAOC,SACnDA,MAAOZ,KAAKN,MAAMC,KAClBU,UAAU,+BACVQ,KAAK,OAAOP,GAAG,QAAQQ,YAAY,kBACnCC,QAAS,SAACN,GAAD,OAAKA,EAAEE,OAAOG,YAAY,MACvC,cAAC,IAAD,CACIT,UAAU,+BACVO,MAAOZ,KAAKN,MAAME,KAClBoB,SAAUhB,KAAKN,MAAME,KACrBY,SAAU,SAACZ,GAAD,OAAQ,EAAKc,SAAS,CAACd,UACjCqB,WAAW,QACXC,WAAW,qBACXC,gBAAc,IAEd,wBAAQC,QAAS,WACb,EAAKnB,MAAMoB,YAAY,EAAK3B,MAAMC,KAAM,EAAKD,MAAME,MACnD,EAAKc,SAAS,CAAEf,KAAM,KACtB,EAAKe,SAAS,CAACd,KAAK,IAAIC,QAE5BQ,UAAU,uBALV,uBAMJ,wBAAQe,QAASpB,KAAKC,MAAMqB,cACxBjB,UAAU,sBADd,0BAGA,oBAAIA,UAAU,0BAAd,SACSP,GAAWE,KAAKC,MAAMC,UAAUqB,KAAI,SAACC,GAAD,OACjC,qBAAsBnB,UAAU,kBAAhC,UACI,8BACKmB,EAAS7B,OAEd,sBAAKU,UAAU,iCAAf,UACA,wDACwB,sBAAMoB,MAAO,CAACC,MAAM,OAApB,SAA6BC,IAAO,IAAI9B,KAAK2B,EAAS5B,OAAOgC,eAErF,wBAAQR,QAAS,kBAAM,EAAKnB,MAAM4B,eAAeL,EAASlB,KAC1DD,UAAU,kBADV,oBARKmB,EAASlB,kB,GA1CxBwB,aAyEHC,eAbS,SAACrC,GACrB,MAAO,CACHQ,UAAUR,MAIS,SAACsC,GACxB,MAAO,CACHX,YAAY,SAAC1B,EAAKC,GAAN,OAAaoC,EAAS,CAACnB,KAAK,eAAelB,OAAKC,UAC5DiC,eAAe,SAACvB,GAAD,OAAM0B,EAAS,CAACnB,KAAK,kBAAkBP,QACtDgB,cAAc,kBAAIU,EAAS,CAACnB,KAAK,wBAG1BkB,CAA4CtC,GCzErDwC,G,OAAQC,aCNa,WAAyB,IAAxBxC,EAAuB,uDAAf,GAAIyC,EAAW,uCAC3CjC,OAAYH,EAEhB,OADAL,EAAM0C,sBAAY,aACVD,EAAOtB,MACX,IAAK,eAGD,OAFAX,EAAS,sBAAOR,GAAP,CAAc,CAAEC,KAAMwC,EAAOxC,KAAMC,KAAMuC,EAAOvC,KAAMU,GAAI+B,iBACnEC,sBAAY,YAAYpC,GACjBA,EACX,IAAK,kBAGD,OAFAA,EAAYR,EAAM6C,QAAO,SAACf,GAAD,OAAcA,EAASlB,KAAO6B,EAAO7B,MAC9DgC,sBAAY,YAAYpC,GACjBA,EACX,IAAK,kBAGD,OAFAA,EAAY,GACZoC,sBAAY,YAAYpC,GACjBA,EACX,QACI,OAAOR,ODVnB8C,IAASC,OACL,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEFS,SAASC,eAAe,U","file":"static/js/main.54a73c38.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nexport const AppSec= styled.div `\r\n  background-image: url(images/back.jpg);\r\n  height:100vh;\r\n  font-family: \"Concert One\", cursive;\r\n  background-position:center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n`\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { AppSec } from './styles.js'\r\nimport DatePicker from \"react-datepicker\";\r\nimport './app.css'\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        text: '',\r\n        date:new Date()\r\n    }\r\n    \r\n    render() {\r\n        let showrem = false;\r\n        if (this.props.reminders!==undefined) {\r\n            showrem=true\r\n        }\r\n        console.log(this.props.reminders)\r\n        return (<>\r\n            <AppSec>\r\n            <span className='p-3' id='title'>To-Do Reminder App</span>\r\n            <div id='reminders' className='p-5 container-sm mt-4'>\r\n            <label htmlFor='alarm'>Enter Alarm Here</label>\r\n            <input onChange={(e) => this.setState({ text: e.target.value })}\r\n                value={this.state.text}\r\n                className='form-control form-control-lg'\r\n                type='text' id='alarm' placeholder='Alarm Title ...'\r\n                onFocus={(e)=>e.target.placeholder=''}/>\r\n            <DatePicker\r\n                className='form-control form-control-lg'\r\n                value={this.state.date}\r\n                selected={this.state.date}\r\n                onChange={(date)=>this.setState({date})}\r\n                timeFormat='HH:mm'\r\n                dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                showTimeSelect\r\n            />\r\n                <button onClick={() => {\r\n                    this.props.addReminder(this.state.text, this.state.date)\r\n                    this.setState({ text: '' })\r\n                    this.setState({date:new Date()})\r\n                }}\r\n                className='btn btn-primary mt-2'>Set Alarm</button>\r\n            <button onClick={this.props.clearReminder}\r\n                className='btn btn-danger mt-2'>Clear All</button>\r\n            </div>\r\n            <ul className='list-group container-sm'>\r\n                    {showrem && this.props.reminders.map((reminder) =>\r\n                        <li key={reminder.id} className='list-group-item'>\r\n                            <div>\r\n                                {reminder.text}\r\n                            </div>\r\n                            <div className='d-flex justify-content-between'>\r\n                            <span>\r\n                                The Alarm is Set to <span style={{color:'red'}}>{moment(new Date(reminder.date)).fromNow()}</span>\r\n                            </span>\r\n                            <button onClick={() => this.props.removeReminder(reminder.id)}\r\n                            className='btn btn-warning' \r\n                            >X</button></div>\r\n                        </li>\r\n            )}\r\n            </ul>\r\n</AppSec>\r\n        </>);\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        reminders:state\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addReminder:(text,date)=>dispatch({type:\"ADD_REMINDER\",text,date}),\r\n        removeReminder:(id)=>dispatch({type:\"REMOVE_REMINDER\",id}),\r\n        clearReminder:()=>dispatch({type:\"CLEAR_REMINDERS\"})\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { RootReducer } from './reducers/rootreducer';\nimport App from './components/app';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\n\nconst store = createStore(RootReducer)\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n        </Provider>\n    , document.getElementById('root'))\n","import { v4 as uuidv4 } from 'uuid';\r\nimport {bake_cookie,read_cookie} from 'sfcookies'\r\nexport const RootReducer = (state = [], action) => {\r\n    let reminders = undefined\r\n    state=read_cookie('reminders')\r\n    switch (action.type) {\r\n        case 'ADD_REMINDER':\r\n            reminders = [...state, { text: action.text, date: action.date, id: uuidv4() }]\r\n            bake_cookie('reminders',reminders)\r\n            return reminders\r\n        case \"REMOVE_REMINDER\":\r\n            reminders = state.filter((reminder) => reminder.id !== action.id)\r\n            bake_cookie('reminders',reminders)\r\n            return reminders\r\n        case \"CLEAR_REMINDERS\":\r\n            reminders = []\r\n            bake_cookie('reminders',reminders)\r\n            return reminders\r\n        default:\r\n            return state\r\n    }\r\n}"],"sourceRoot":""}